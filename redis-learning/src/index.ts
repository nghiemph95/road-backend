import { RedisConfig } from "./config/redis";
import { BasicOperations } from "./examples/basic-operations";
import { DataStructures } from "./examples/data-structures";
import { CachingExamples } from "./examples/caching";

/**
 * Main entry point cho Redis Learning Project
 * Ch·∫°y c√°c v√≠ d·ª• kh√°c nhau ƒë·ªÉ h·ªçc Redis
 */
async function main() {
  console.log("üöÄ Redis Learning Project - B·∫Øt ƒë·∫ßu h·ªçc Redis v·ªõi TypeScript!");
  console.log("=".repeat(60));

  const redis = RedisConfig.getInstance();

  try {
    // K·∫øt n·ªëi Redis
    console.log("üì° ƒêang k·∫øt n·ªëi Redis...");
    await redis.connect();

    // Test k·∫øt n·ªëi
    const pong = await redis.ping();
    console.log(`‚úÖ Redis connection test: ${pong}`);

    // Hi·ªÉn th·ªã th√¥ng tin Redis
    const info = await redis.info();
    console.log("\nüìä Redis Server Info:");
    console.log(info.split("\n").slice(0, 10).join("\n")); // Ch·ªâ hi·ªÉn th·ªã 10 d√≤ng ƒë·∫ßu

    // Menu l·ª±a ch·ªçn
    console.log("\nüéØ Ch·ªçn v√≠ d·ª• ƒë·ªÉ ch·∫°y:");
    console.log("1. Basic Operations (SET/GET, EXISTS, DEL, EXPIRE)");
    console.log("2. Data Structures (Lists, Sets, Sorted Sets, Hashes)");
    console.log("3. Caching Examples (Cache patterns, TTL, Invalidation)");
    console.log("4. Ch·∫°y t·∫•t c·∫£ v√≠ d·ª•");
    console.log("5. Tho√°t");

    // ƒê·ªÉ ƒë∆°n gi·∫£n, ch·∫°y t·∫•t c·∫£ v√≠ d·ª•
    console.log("\nüîÑ Ch·∫°y t·∫•t c·∫£ v√≠ d·ª•...");

    // 1. Basic Operations
    console.log("\n" + "=".repeat(60));
    console.log("üìö PH·∫¶N 1: BASIC OPERATIONS");
    console.log("=".repeat(60));
    const basicOps = new BasicOperations();
    await basicOps.runAllExamples();

    // 2. Data Structures
    console.log("\n" + "=".repeat(60));
    console.log("üìö PH·∫¶N 2: DATA STRUCTURES");
    console.log("=".repeat(60));
    const dataStructures = new DataStructures();
    await dataStructures.runAllExamples();

    // 3. Caching
    console.log("\n" + "=".repeat(60));
    console.log("üìö PH·∫¶N 3: CACHING EXAMPLES");
    console.log("=".repeat(60));
    const caching = new CachingExamples();
    await caching.runAllExamples();

    console.log("\n" + "=".repeat(60));
    console.log("üéâ HO√ÄN TH√ÄNH! T·∫•t c·∫£ v√≠ d·ª• ƒë√£ ƒë∆∞·ª£c ch·∫°y th√†nh c√¥ng!");
    console.log("=".repeat(60));

    // Hi·ªÉn th·ªã th·ªëng k√™
    const finalInfo = await redis.info();
    const memoryInfo = finalInfo
      .split("\n")
      .find((line) => line.startsWith("used_memory_human"));
    console.log(`\nüíæ Memory usage: ${memoryInfo}`);
  } catch (error) {
    console.error("‚ùå L·ªói:", error);
  } finally {
    // ƒê√≥ng k·∫øt n·ªëi
    console.log("\nüîå ƒêang ƒë√≥ng k·∫øt n·ªëi Redis...");
    await redis.disconnect();
    console.log("‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi Redis");
  }
}

// X·ª≠ l√Ω l·ªói kh√¥ng b·∫Øt ƒë∆∞·ª£c
process.on("unhandledRejection", (reason, promise) => {
  console.error("Unhandled Rejection at:", promise, "reason:", reason);
  process.exit(1);
});

process.on("uncaughtException", (error) => {
  console.error("Uncaught Exception:", error);
  process.exit(1);
});

// Ch·∫°y ch∆∞∆°ng tr√¨nh
if (require.main === module) {
  main().catch(console.error);
}

export { RedisConfig, BasicOperations, DataStructures, CachingExamples };
